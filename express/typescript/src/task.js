"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.doTask = exports.createTasksDecorator = void 0;
require("reflect-metadata");
const path_1 = __importDefault(require("path"));
const utils_1 = require("./utils");
const class_1 = require("./utils/class");
const moment_1 = __importDefault(require("moment"));
const fs_1 = __importDefault(require("fs"));
const projectRoot = path_1.default.join(__dirname, '../../../../../');
const tasksLogPath = path_1.default.join(projectRoot, './logs/tasks');
const now = new Date();
const getDateNum = () => {
    return new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate();
};
function parseLoop(str) {
    let time = 0;
    const msList = str.match(/[0-9]+ms/g);
    if (msList) {
        msList
            .map(item => Number.parseFloat(item.replace('ms', '')))
            .forEach(t => {
            time += t;
        });
    }
    const sList = str.match(/[0-9]+s/g);
    if (sList) {
        sList
            .map(item => Number.parseFloat(item.replace('s', '')))
            .forEach(t => {
            time += t * 1000;
        });
    }
    const minList = str.match(/[0-9]+min/g);
    if (minList) {
        minList
            .map(item => Number.parseFloat(item.replace('min', '')))
            .forEach(t => {
            time += t * 1000 * 60;
        });
    }
    const hList = str.match(/[0-9]+h/g);
    if (hList) {
        hList
            .map(item => Number.parseFloat(item.replace('h', '')))
            .forEach(t => {
            time += t * 1000 * 60 * 60;
        });
    }
    const dList = str.match(/[0-9]+D/g);
    if (dList) {
        dList
            .map(item => Number.parseFloat(item.replace('D', '')))
            .forEach(t => {
            time += t * 1000 * 60 * 60 * 24;
        });
    }
    const wList = str.match(/[0-9]+W/g);
    if (wList) {
        wList
            .map(item => Number.parseFloat(item.replace('W', '')))
            .forEach(t => {
            time += t * 1000 * 60 * 60 * 24 * 7;
        });
    }
    const dateNum = getDateNum();
    const monList = str.match(/[0-9]+M/g);
    if (monList) {
        monList
            .map(item => Number.parseFloat(item.replace('M', '')))
            .forEach(t => {
            time += t * 1000 * 60 * 60 * 24 * dateNum;
        });
    }
    const yList = str.match(/[0-9]+Y/g);
    if (yList) {
        yList
            .map(item => Number.parseFloat(item.replace('Y', '')))
            .forEach(t => {
            time += t * 1000 * 60 * 60 * 24 * 365;
        });
    }
    return time;
}
function toSetTime(str) {
    let arr = str.split(':').map(t => Number.parseInt(t));
    while (arr.length < 3) {
        arr.push(0);
    }
    return arr;
}
function countWeek(start, end) {
    if (end >= start)
        return end - start;
    return start + 7 - end;
}
function beforeToday(time) {
    let nowTimeArr = toSetTime((0, moment_1.default)(now).format('HH:mm:ss'));
    return !time.some((item, index) => item > nowTimeArr[index]);
}
function parseTime(time, week, month) {
    if ((0, utils_1.notEmpty)(week) && (0, utils_1.notEmpty)(month))
        throw new Error('@Week and @Month cannot be set at the same time.');
    let loop = 0;
    let delay;
    const oneDay = 1000 * 60 * 60 * 24;
    let start = new Date();
    if (!(0, utils_1.notEmpty)(week) && !(0, utils_1.notEmpty)(month) && (0, utils_1.notEmpty)(time)) {
        loop = oneDay;
        if (beforeToday(toSetTime(time)))
            start.setDate(start.getDate() + 1);
        time = toSetTime(time);
        start.setHours(time[0], time[1], time[2]);
        delay = start.getTime() - now.getTime();
        return { loop, delay };
    }
    time = toSetTime(time || '00:00:00');
    start.setHours(time[0], time[1], time[2]);
    if ((0, utils_1.notEmpty)(month)) {
        loop = oneDay * getDateNum();
        month = Number.parseInt(month);
        if (now.getDate() > month || beforeToday(time))
            start.setMonth(start.getMonth() + 1);
        start.setDate(month);
    }
    if ((0, utils_1.notEmpty)(week)) {
        loop = oneDay * 7;
        week = Number.parseInt(week);
        let nextWeek = countWeek(now.getDay(), week);
        if (beforeToday(time))
            nextWeek += 7;
        start.setDate(start.getDate() + nextWeek);
    }
    delay = start.getTime() - now.getTime();
    return { loop, delay };
}
const createTasksDecorator = (mode) => {
    return (params) => {
        return (_target, _propertyKey, descriptor) => {
            Reflect.defineMetadata(mode, params, descriptor.value);
        };
    };
};
exports.createTasksDecorator = createTasksDecorator;
function taskLogger(mode, className, ret) {
    if (!fs_1.default.existsSync(tasksLogPath))
        fs_1.default.mkdirSync(tasksLogPath);
    const fileName = (0, moment_1.default)(new Date()).format('YYYY-MM-DD') + '.log';
    const filePath = path_1.default.join(tasksLogPath, fileName);
    const time = (0, moment_1.default)(new Date()).format('YYYY-MM-DD HH:mm:ss');
    let logString = `[${time}] ${mode} Task from class ${className} done!`;
    if (ret)
        logString += `Method return value: ${ret}.`;
    logString += '\n';
    try {
        fs_1.default.appendFileSync(filePath, logString);
    }
    catch (e) {
        console.error(e);
    }
}
const doTask = (Task) => {
    const flag = Reflect.getMetadata('isTask', Task);
    if (!flag)
        return;
    const methods = (0, class_1.getMethodsFromClass)(new Task());
    for (const methodName in methods) {
        const fn = methods[methodName];
        const loop = Reflect.getMetadata('loop', fn);
        const time = Reflect.getMetadata('time', fn);
        const week = Reflect.getMetadata('week', fn);
        const month = Reflect.getMetadata('month', fn);
        if ((0, utils_1.notEmpty)(loop)) {
            const loopTime = parseLoop(loop);
            setInterval(() => {
                taskLogger('Loop', Task.name, fn());
            }, loopTime);
        }
        else if ((0, utils_1.notEmpty)(time, week, month)) {
            const { delay, loop } = parseTime(time, week, month);
            setTimeout(() => {
                taskLogger('Schedule', Task.name, fn());
                setInterval(() => {
                    taskLogger('Schedule', Task.name, fn());
                }, loop);
            }, delay);
        }
    }
};
exports.doTask = doTask;
//# sourceMappingURL=data:application/json;base64,